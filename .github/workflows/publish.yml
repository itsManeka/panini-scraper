name: Build, Test & Publish

on:
  release:
    types: [ created ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Check coverage threshold
      run: |
        if [ -f coverage/lcov.info ]; then
          echo "Coverage report generated successfully"
        else
          echo "Coverage report not found"
          exit 1
        fi
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Check build output
      run: |
        if [ -d "dist" ]; then
          echo "Build successful - dist directory created"
          ls -la dist/
        else
          echo "Build failed - dist directory not found"
          exit 1
        fi

  publish:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests one more time before publish
      run: npm run test:ci
      
    - name: Build for production
      run: npm run build
      
    - name: Update package version
      run: |
        # Extract version from git tag (remove 'v' prefix if present)
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        echo "Setting version to: $VERSION"
        npm version $VERSION --no-git-tag-version
        
    - name: Publish to npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create GitHub Release Assets
      run: |
        # Create a tarball of the package
        npm pack
        mv *.tgz panini-scraper-${VERSION}.tgz
      env:
        VERSION: ${{ github.ref_name }}
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./panini-scraper-${{ github.ref_name }}.tgz
        asset_name: panini-scraper-${{ github.ref_name }}.tgz
        asset_content_type: application/gzip

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Check for known vulnerabilities
      run: npx audit-ci --moderate