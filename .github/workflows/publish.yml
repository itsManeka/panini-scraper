name: Build, Test & Publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Check coverage threshold
      run: |
        if [ -f coverage/lcov.info ]; then
          echo "Coverage report generated successfully"
        else
          echo "Coverage report not found"
          exit 1
        fi
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Check build output
      run: |
        if [ -d "dist" ]; then
          echo "Build successful - dist directory created"
          ls -la dist/
        else
          echo "Build failed - dist directory not found"
          exit 1
        fi

  publish:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests one more time before publish
      run: npm run test:ci
      
    - name: Build for production
      run: npm run build
      
    - name: Get package version
      id: package_version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=$VERSION" >> $GITHUB_OUTPUT
        echo "Package version: $VERSION"
        
    - name: Create and push tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if tag already exists
        if git rev-parse "${{ steps.package_version.outputs.version }}" >/dev/null 2>&1; then
          echo "Tag ${{ steps.package_version.outputs.version }} already exists, skipping tag creation"
        else
          echo "Creating tag ${{ steps.package_version.outputs.version }}"
          git tag ${{ steps.package_version.outputs.version }}
          git push origin ${{ steps.package_version.outputs.version }}
        fi
        
    - name: Check if version already published
      id: check_version
      run: |
        VERSION=${{ steps.package_version.outputs.version_number }}
        if npm view panini-scraper@$VERSION version >/dev/null 2>&1; then
          echo "Version $VERSION already exists on NPM"
          echo "should_publish=false" >> $GITHUB_OUTPUT
        else
          echo "Version $VERSION not found on NPM, proceeding with publish"
          echo "should_publish=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Publish to npm
      if: steps.check_version.outputs.should_publish == 'true'
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.package_version.outputs.version }}
        release_name: Release ${{ steps.package_version.outputs.version }}
        body: |
          ## Changes
          
          This release includes the latest changes from the main branch.
          
          ## Package Information
          - **Version**: ${{ steps.package_version.outputs.version_number }}
          - **NPM Package**: Available at [npmjs.com](https://www.npmjs.com/package/panini-scraper)
          
          ## Installation
          ```bash
          npm install panini-scraper@${{ steps.package_version.outputs.version_number }}
          ```
        draft: false
        prerelease: false
        
    - name: Create GitHub Release Assets
      run: |
        # Create a tarball of the package
        npm pack
        # The file is already named correctly: panini-scraper-VERSION.tgz
        TARBALL=$(ls panini-scraper-*.tgz)
        echo "Created package: $TARBALL"
        echo "tarball_name=$TARBALL" >> $GITHUB_ENV
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.tarball_name }}
        asset_name: ${{ env.tarball_name }}
        asset_content_type: application/gzip

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Check for known vulnerabilities
      run: npx audit-ci --moderate